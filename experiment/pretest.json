{
  "version": 2.0,
  "questions": [
    {
      "question": "In the context of Deterministic Finite Automaton (DFA), what is the purpose of minimization?",
      "answers": {
        "a": "To increase the number of states for better recognition.",
        "b": "To simplify and reduce the number of states while preserving the language accepted.",
        "c": "To add more transitions for increased complexity.",
        "d": "To convert DFA to NFA for easier analysis."
      },
      "explanations": {
        "a": "Incorrect. Minimization reduces, not increases, the number of states.",
        "b": "Correct! Minimization of DFA is done to simplify and reduce the number of states while preserving the language accepted.",
        "c": "Incorrect. Minimization eliminates redundancy, it does not increase complexity.",
        "d": "Incorrect. Minimization keeps the DFA form."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the impact of minimization on the size of a Deterministic Finite Automaton (DFA)?",
      "answers": {
        "a": "It always increases the size of the DFA.",
        "b": "It reduces the size of the DFA by eliminating redundant states.",
        "c": "It has no effect on the size of the DFA.",
        "d": "It only affects the transition functions of the DFA."
      },
      "explanations": {
        "a": "Incorrect. Minimization does not increase states.",
        "b": "Correct! Minimization reduces the size of the DFA by eliminating redundant states while preserving the language.",
        "c": "Incorrect. Minimization directly impacts state size.",
        "d": "Incorrect. Both states and transitions are affected."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "When is a Deterministic Finite Automaton (DFA) considered minimized?",
      "answers": {
        "a": "When it has the maximum number of states.",
        "b": "When it recognizes a regular language.",
        "c": "When no equivalent DFA with fewer states can recognize the same language.",
        "d": "When it contains only one state."
      },
      "explanations": {
        "a": "Incorrect. The goal is to reduce states, not maximize.",
        "b": "Incorrect. Every DFA recognizes a regular language, minimized or not.",
        "c": "Correct! A DFA is minimized when no equivalent DFA with fewer states exists.",
        "d": "Incorrect. One-state DFAs are not always possible."
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the first step in DFA minimization using the Equivalence Theorem (Partition Refinement Method)?",
      "answers": {
        "a": "Merge all states into a single state.",
        "b": "Partition the states into accepting and non-accepting groups.",
        "c": "Construct the minimized DFA directly.",
        "d": "Mark distinguishable pairs of states."
      },
      "explanations": {
        "a": "Incorrect. Merging all states is not valid.",
        "b": "Correct! The first step is partitioning states into accepting and non-accepting groups.",
        "c": "Incorrect. The minimized DFA is the result, not the first step.",
        "d": "Incorrect. Marking pairs is part of the table-filling method, not partition refinement."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "In the Table-Filling Method for DFA minimization, which pairs of states are initially marked as distinguishable?",
      "answers": {
        "a": "States that have the same transitions.",
        "b": "Pairs where one is an accepting state and the other is not.",
        "c": "All state pairs.",
        "d": "Pairs that belong to the same equivalence class."
      },
      "explanations": {
        "a": "Incorrect. Equivalent transitions do not mark states distinguishable.",
        "b": "Correct! Accepting vs. non-accepting pairs are initially marked as distinguishable.",
        "c": "Incorrect. Not all pairs are marked at the start.",
        "d": "Incorrect. Equivalence classes are found later."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "Why is DFA minimization important in practical applications?",
      "answers": {
        "a": "It guarantees faster computations by always reducing time complexity.",
        "b": "It removes redundant states, creates efficient DFAs, and ensures a unique canonical representation.",
        "c": "It converts any DFA into an equivalent NFA.",
        "d": "It increases the readability of the DFA diagram."
      },
      "explanations": {
        "a": "Incorrect. Minimization does not always reduce time complexity, but reduces states.",
        "b": "Correct! Minimization removes redundancy, makes DFAs efficient, and guarantees uniqueness.",
        "c": "Incorrect. Minimization does not convert to NFA.",
        "d": "Incorrect. Readability is not the primary goal."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    }
  ]
}
